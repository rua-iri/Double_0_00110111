# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    container_name: double_0_00110111-api-server
    build:
      context: .
    ports:
      - 8000:8000
    volumes:
      - image-data:/images
    develop:
      watch:
        - path: .
          action: rebuild
    depends_on:
      db:
        condition: service_healthy
      worker:
        condition: service_started

  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker compose up`.
  db:
    image: postgres
    container_name: double_0_00110111-DB
    restart: always
    user: postgres
    # secrets:
    #   - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./data/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    environment:
      - POSTGRES_DB=Double_0_00110111_DB
      # - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_PASSWORD=password
    ports:
      - 5435:5432
    # expose:
    #   - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  mq:
    image: rabbitmq:latest
    container_name: double_0_00110111-rabbitmq
    ports:
      - "5673:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: mq
    healthcheck:
      test: ["rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s

  worker:
    container_name: double_0_00110111-worker
    build:
      context: .
    volumes:
      - image-data:/images
    develop:
      watch:
        - path: .
          action: rebuild
    depends_on:
      db:
        condition: service_healthy
      mq:
        condition: service_healthy
    command:
      ["celery", "-A", "double_0_00110111.tasks", "worker", "--loglevel=info"]

volumes:
  db-data:
  image-data:
# secrets:
#   db-password:
#     file: db/password.txt

